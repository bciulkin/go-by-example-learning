// Code generated by MockGen. DO NOT EDIT.
// Source: animal-repository.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	model "go-by-example/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAnimalRepository is a mock of AnimalRepository interface.
type MockAnimalRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAnimalRepositoryMockRecorder
}

// MockAnimalRepositoryMockRecorder is the mock recorder for MockAnimalRepository.
type MockAnimalRepositoryMockRecorder struct {
	mock *MockAnimalRepository
}

// NewMockAnimalRepository creates a new mock instance.
func NewMockAnimalRepository(ctrl *gomock.Controller) *MockAnimalRepository {
	mock := &MockAnimalRepository{ctrl: ctrl}
	mock.recorder = &MockAnimalRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnimalRepository) EXPECT() *MockAnimalRepositoryMockRecorder {
	return m.recorder
}

// AddAnimal mocks base method.
func (m *MockAnimalRepository) AddAnimal(anml model.Animal) (model.Animal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAnimal", anml)
	ret0, _ := ret[0].(model.Animal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAnimal indicates an expected call of AddAnimal.
func (mr *MockAnimalRepositoryMockRecorder) AddAnimal(anml interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAnimal", reflect.TypeOf((*MockAnimalRepository)(nil).AddAnimal), anml)
}

// DeleteAnimal mocks base method.
func (m *MockAnimalRepository) DeleteAnimal(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimal", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAnimal indicates an expected call of DeleteAnimal.
func (mr *MockAnimalRepositoryMockRecorder) DeleteAnimal(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimal", reflect.TypeOf((*MockAnimalRepository)(nil).DeleteAnimal), id)
}

// GetAllAnimals mocks base method.
func (m *MockAnimalRepository) GetAllAnimals() ([]model.Animal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAnimals")
	ret0, _ := ret[0].([]model.Animal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAnimals indicates an expected call of GetAllAnimals.
func (mr *MockAnimalRepositoryMockRecorder) GetAllAnimals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAnimals", reflect.TypeOf((*MockAnimalRepository)(nil).GetAllAnimals))
}

// GetAnimalById mocks base method.
func (m *MockAnimalRepository) GetAnimalById(id string) (model.Animal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimalById", id)
	ret0, _ := ret[0].(model.Animal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimalById indicates an expected call of GetAnimalById.
func (mr *MockAnimalRepositoryMockRecorder) GetAnimalById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimalById", reflect.TypeOf((*MockAnimalRepository)(nil).GetAnimalById), id)
}

// UpdateAnimal mocks base method.
func (m *MockAnimalRepository) UpdateAnimal(anml model.Animal) (model.Animal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimal", anml)
	ret0, _ := ret[0].(model.Animal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimal indicates an expected call of UpdateAnimal.
func (mr *MockAnimalRepositoryMockRecorder) UpdateAnimal(anml interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimal", reflect.TypeOf((*MockAnimalRepository)(nil).UpdateAnimal), anml)
}
